import os
import ujson as json
import zipfile
import numpy as np
import pickle
import torch
import scipy.sparse as sp
import torch.nn as nn
from collections import defaultdict
from transformers import BertTokenizer
from models.pos_map import pair2sequence, bert_prefix_ac_map, pair_idx_map
from sklearn.metrics import f1_score
from transformers import LongformerTokenizer, LongformerModel, LongformerConfig, LongformerForMaskedLM, \
    BartTokenizerFast, BartTokenizer, AutoTokenizer
from utils.basic_utils import get_edge_frompairs


# 2 1 [0]
# 3 3 [0, 1, 9]
# 4 6 [0, 1, 2, 9, 10, 18]
# 5 10 [0, 1, 2, 3, 9, 10, 11, 18, 19, 27]
# 6 15 [0, 1, 2, 3, 4, 9, 10, 11, 12, 18, 19, 20, 27, 28, 35]
# 7 21 [0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 18, 19, 20, 21, 27, 28, 29, 35, 36, 42]
# 8 28 [0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 18, 19, 20, 21, 22, 27, 28, 29, 30, 35, 36, 37, 42, 43, 48]
# 9 36 [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 35, 36, 37, 38, 42, 43, 44, 48, 49, 53]
# 10 45 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 42, 43, 44, 45, 48, 49, 50, 53, 54, 57]
# 11 54 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 57, 58, 60]
# 12 63 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62]

# bert_weights_path = "./data/bert-base-uncased"
# tokenizer = BertTokenizer.from_pretrained(bert_weights_path)
# vocab_size = 30522

os.environ['CUDA_VISIBLE_DEVICES'] = '2'
# plm_weights_path = "./data/longformer-base"
plm_weights_path = "./data/bart-base"

# special_tokens = ['<pad>', '<essay>', '<para-conclusion>', '<para-body>', '<para-intro>', '<ac>',
#                                '</essay>', '</para-conclusion>', '</para-body>', '</para-intro>', '</ac>']
# special_tokens_dict = {'additional_special_tokens': special_tokens}
# tokenizer = LongformerTokenizer.from_pretrained(plm_weights_path)

# tokenizer.add_special_tokens(special_tokens_dict)  ############为 roberta 设置特殊字符
# longformerconfig = LongformerConfig.from_pretrained(plm_weights_path)
# longformerconfig.attention_mode = 'sliding_chunks'
# longformerconfig.attention_window = [768] * 12

# longformer = LongformerForMaskedLM.from_pretrained(plm_weights_path, config=longformerconfig)
# longformer.resize_token_embeddings(len(tokenizer))
# vocab_size = longformer.vocab_size
# print("vocab_size", vocab_size)


special_tokens = ['<essay>', '<para-conclusion>', '<para-body>', '<para-intro>', '<ac>',
                               '</essay>', '</para-conclusion>', '</para-body>', '</para-intro>', '</ac>']
tokenizer = AutoTokenizer.from_pretrained(plm_weights_path, add_special_tokens=True)
tokenizer.add_tokens(special_tokens)  ############为 bart 设置特殊字符
vocab_size = len(tokenizer)
print("vocab_size", vocab_size)

# label_dict = {0: 'MajorClaim', 1: 'Claim', 2: 'Premise', 3: 'no relation', 4: 'relation', 5: "Support", 6: "Attack"}
# # tokenizer = AutoTokenizer.from_pretrained(self.config.bert_weights_path)
# label_dict = {i: tokenizer.convert_tokens_to_ids(tokenizer.tokenize(v)) for i, v in label_dict.items()}
# print("label_dict", label_dict)
# label_emb = []
# input_embeds = longformer.get_input_embeddings()
# for i in range(len(label_dict)):
#     label_emb.append(
#         input_embeds.weight.index_select(0, torch.tensor(label_dict[i])).mean(dim=0))
# label_emb = torch.stack(label_emb)
#
# for n, p in longformer.named_parameters():
#     print(n, p.size())
#     if n == "lm_head.bias":
#         print(p[:100])

sep_token_id = tokenizer.sep_token_id
mask_token_id = tokenizer.mask_token_id
print("mask_token_id", mask_token_id)

# 1
# num_class = 7
# max_ac_num = 12
# max_pair_num = 63 #
# pair_num_map = {2: 1, 3: 3, 4: 6, 5: 10, 6: 15, 7: 21, 8: 28, 9: 36, 10: 45, 11: 54, 12:63}
# pair_idx_map = {
# 	2 : [0],
# 	3 : [0, 1, 9],
# 	4 : [0, 1, 2, 9, 10, 18],
# 	5 : [0, 1, 2, 3, 9, 10, 11, 18, 19, 27],
# 	6 : [0, 1, 2, 3, 4, 9, 10, 11, 12, 18, 19, 20, 27, 28, 35],
# 	7 : [0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 18, 19, 20, 21, 27, 28, 29, 35, 36, 42],
# 	8 : [0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 18, 19, 20, 21, 22, 27, 28, 29, 30, 35, 36, 37, 42, 43, 48],
# 	9 : [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 35, 36,
# 	     37, 38, 42, 43, 44, 48, 49, 53],
# 	10 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30,
# 	      31, 32, 35, 36, 37, 38, 39, 42, 43, 44, 45, 48, 49, 50, 53, 54, 57],
# 	11 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28,
# 	      29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 57, 58, 60],
# 	12 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
# 	      28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
# 	      54, 55, 56, 57, 58, 59, 60, 61, 62]
# }
#
# for span_num in list(range(2, 13)):
# 	prefix = [vocab_size + num_class] # virual doc token
# 	for i in range(1, span_num + 1):
# 		prefix.append(vocab_size + num_class + i)  # num_class = 3 + 2 + 2 == 7
# 		prefix.append(vocab_size + num_class + max_ac_num + max_pair_num * 2 + 1)
#
# 	pair_index = pair_idx_map[span_num]
# 	for i in pair_index:
# 		prefix.append(vocab_size + num_class + max_ac_num + i + 1)
# 		prefix.append(vocab_size + num_class + max_ac_num + max_pair_num * 2 + 1)
#
# 	for i in pair_index:
# 		prefix.append(vocab_size + num_class + max_ac_num + max_pair_num + i + 1)  # 63 == len(self.pair_idx_map[12])
# 		prefix.append(vocab_size + num_class + max_ac_num + max_pair_num * 2 + 1)
#
# 	prefix.append(sep_token_id)
#
# 	print(prefix)


# 2
# num_class = 7
# max_ac_num = 1
# max_pair_num = 1 #
# pair_num_map = {2: 1, 3: 3, 4: 6, 5: 10, 6: 15, 7: 21, 8: 28, 9: 36, 10: 45, 11: 54, 12:63}
# pair_idx_map = {
# 	2 : [0],
# 	3 : [0, 1, 9],
# 	4 : [0, 1, 2, 9, 10, 18],
# 	5 : [0, 1, 2, 3, 9, 10, 11, 18, 19, 27],
# 	6 : [0, 1, 2, 3, 4, 9, 10, 11, 12, 18, 19, 20, 27, 28, 35],
# 	7 : [0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 18, 19, 20, 21, 27, 28, 29, 35, 36, 42],
# 	8 : [0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 18, 19, 20, 21, 22, 27, 28, 29, 30, 35, 36, 37, 42, 43, 48],
# 	9 : [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 35, 36,
# 	     37, 38, 42, 43, 44, 48, 49, 53],
# 	10 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30,
# 	      31, 32, 35, 36, 37, 38, 39, 42, 43, 44, 45, 48, 49, 50, 53, 54, 57],
# 	11 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28,
# 	      29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 57, 58, 60],
# 	12 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
# 	      28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
# 	      54, 55, 56, 57, 58, 59, 60, 61, 62]
# }
#
# for span_num in list(range(2, 13)):
# 	prefix = [vocab_size + num_class] # virual doc token
# 	for i in range(1, span_num + 1):
# 		prefix.append(vocab_size + num_class + 1)  # num_class = 3 + 2 + 2 == 7
# 		prefix.append(vocab_size + num_class + max_ac_num + max_pair_num * 2 + 1)
#
# 	pair_index = pair_idx_map[span_num]
# 	for i in pair_index:
# 		prefix.append(vocab_size + num_class + max_ac_num + 1)
# 		prefix.append(vocab_size + num_class + max_ac_num + max_pair_num * 2 + 1)
#
# 	for i in pair_index:
# 		prefix.append(vocab_size + num_class + max_ac_num + max_pair_num + 1)  # 63 == len(self.pair_idx_map[12])
# 		prefix.append(vocab_size + num_class + max_ac_num + max_pair_num * 2 + 1)
#
# 	prefix.append(sep_token_id)
#
# 	print(prefix)


# 3
# num_class = 7
# max_ac_num = 12
# max_pair_num = 63 #
# pair_num_map = {2: 1, 3: 3, 4: 6, 5: 10, 6: 15, 7: 21, 8: 28, 9: 36, 10: 45, 11: 54, 12:63}
# pair_idx_map = {
# 	2 : [0],
# 	3 : [0, 1, 9],
# 	4 : [0, 1, 2, 9, 10, 18],
# 	5 : [0, 1, 2, 3, 9, 10, 11, 18, 19, 27],
# 	6 : [0, 1, 2, 3, 4, 9, 10, 11, 12, 18, 19, 20, 27, 28, 35],
# 	7 : [0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 18, 19, 20, 21, 27, 28, 29, 35, 36, 42],
# 	8 : [0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 18, 19, 20, 21, 22, 27, 28, 29, 30, 35, 36, 37, 42, 43, 48],
# 	9 : [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 35, 36,
# 	     37, 38, 42, 43, 44, 48, 49, 53],
# 	10 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30,
# 	      31, 32, 35, 36, 37, 38, 39, 42, 43, 44, 45, 48, 49, 50, 53, 54, 57],
# 	11 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28,
# 	      29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 57, 58, 60],
# 	12 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
# 	      28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
# 	      54, 55, 56, 57, 58, 59, 60, 61, 62]
# }

# actc ari artc
# for span_num in list(range(2, 13)):
# 	prefix = [vocab_size + num_class] # virual doc token
# 	for i in range(1, span_num + 1):
# 		prefix.append(vocab_size + num_class + i)  # num_class = 3 + 2 + 2 == 7
#
# 	pair_index = pair_idx_map[span_num]
# 	for i in pair_index:
# 		prefix.append(vocab_size + num_class + max_ac_num + i + 1)
#
# 	for i in pair_index:
# 		prefix.append(vocab_size + num_class + max_ac_num + max_pair_num + i + 1)  # 63 == len(self.pair_idx_map[12])
#
# 	prefix.append(sep_token_id)
#
# 	print(prefix)

# ari actc, artc
# for span_num in list(range(2, 13)):
# 	prefix = [vocab_size + num_class] # virual doc token
#
# 	pair_index = pair_idx_map[span_num]
# 	for i in pair_index:
# 		prefix.append(vocab_size + num_class + max_ac_num + i + 1)
#
# 	for i in range(1, span_num + 1):
# 		prefix.append(vocab_size + num_class + i)  # num_class = 3 + 2 + 2 == 7
#
# 	for i in pair_index:
# 		prefix.append(vocab_size + num_class + max_ac_num + max_pair_num + i + 1)  # 63 == len(self.pair_idx_map[12])
#
# 	prefix.append(sep_token_id)
#
# 	print(prefix)

# ari artc actc
# for span_num in list(range(2, 13)):
# 	prefix = [vocab_size + num_class] # virual doc token
#
# 	pair_index = pair_idx_map[span_num]
# 	for i in pair_index:
# 		prefix.append(vocab_size + num_class + max_ac_num + i + 1)
#
# 	for i in pair_index:
# 		prefix.append(vocab_size + num_class + max_ac_num + max_pair_num + i + 1)  # 63 == len(self.pair_idx_map[12])
#
# 	for i in range(1, span_num + 1):
# 		prefix.append(vocab_size + num_class + i)  # num_class = 3 + 2 + 2 == 7
# 	prefix.append(sep_token_id)
#
# 	print(prefix)


# 4
# num_class = 7
# max_ac_num = 1
# max_pair_num = 1 #
# pair_num_map = {2: 1, 3: 3, 4: 6, 5: 10, 6: 15, 7: 21, 8: 28, 9: 36, 10: 45, 11: 54, 12:63}
# pair_idx_map = {
# 	2 : [0],
# 	3 : [0, 1, 9],
# 	4 : [0, 1, 2, 9, 10, 18],
# 	5 : [0, 1, 2, 3, 9, 10, 11, 18, 19, 27],
# 	6 : [0, 1, 2, 3, 4, 9, 10, 11, 12, 18, 19, 20, 27, 28, 35],
# 	7 : [0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 18, 19, 20, 21, 27, 28, 29, 35, 36, 42],
# 	8 : [0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 18, 19, 20, 21, 22, 27, 28, 29, 30, 35, 36, 37, 42, 43, 48],
# 	9 : [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 35, 36,
# 	     37, 38, 42, 43, 44, 48, 49, 53],
# 	10 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30,
# 	      31, 32, 35, 36, 37, 38, 39, 42, 43, 44, 45, 48, 49, 50, 53, 54, 57],
# 	11 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28,
# 	      29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 57, 58, 60],
# 	12 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
# 	      28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
# 	      54, 55, 56, 57, 58, 59, 60, 61, 62]
# }
#
# for span_num in list(range(2, 13)):
# 	prefix = [vocab_size + num_class] # virual doc token
# 	for i in range(1, span_num + 1):
# 		prefix.append(vocab_size + num_class + 1)  # num_class = 3 + 2 + 2 == 7
#
# 	pair_index = pair_idx_map[span_num]
# 	for i in pair_index:
# 		prefix.append(vocab_size + num_class + max_ac_num + 1)
#
# 	for i in pair_index:
# 		prefix.append(vocab_size + num_class + max_ac_num + max_pair_num + 1)  # 63 == len(self.pair_idx_map[12])
#
# 	prefix.append(sep_token_id)
#
# 	print(prefix)


# 5
# num_class = 7
# max_ac_num = 12
# max_pair_num = 63 #
# pair_num_map = {2: 1, 3: 3, 4: 6, 5: 10, 6: 15, 7: 21, 8: 28, 9: 36, 10: 45, 11: 54, 12:63}
# pair_idx_map = {
# 	2 : [0],
# 	3 : [0, 1, 9],
# 	4 : [0, 1, 2, 9, 10, 18],
# 	5 : [0, 1, 2, 3, 9, 10, 11, 18, 19, 27],
# 	6 : [0, 1, 2, 3, 4, 9, 10, 11, 12, 18, 19, 20, 27, 28, 35],
# 	7 : [0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 18, 19, 20, 21, 27, 28, 29, 35, 36, 42],
# 	8 : [0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 18, 19, 20, 21, 22, 27, 28, 29, 30, 35, 36, 37, 42, 43, 48],
# 	9 : [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 35, 36,
# 	     37, 38, 42, 43, 44, 48, 49, 53],
# 	10 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30,
# 	      31, 32, 35, 36, 37, 38, 39, 42, 43, 44, 45, 48, 49, 50, 53, 54, 57],
# 	11 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28,
# 	      29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 57, 58, 60],
# 	12 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
# 	      28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
# 	      54, 55, 56, 57, 58, 59, 60, 61, 62]
# }
#
# for span_num in list(range(2, 13)):
# 	prefix = [vocab_size + num_class] # virual doc token
# 	for i in range(1, span_num + 1):
# 		prefix.append(vocab_size + num_class + i)  # num_class = 3 + 2 + 2 == 7
# 		prefix.append(vocab_size + num_class + max_ac_num + max_pair_num * 2 + 1)
#
# 	pair_index = pair_idx_map[span_num]
# 	for i in pair_index:
# 		prefix.append(vocab_size + num_class + max_ac_num + i + 1)
# 		prefix.append(vocab_size + num_class + max_ac_num + max_pair_num * 2 + 2)
#
# 	for i in pair_index:
# 		prefix.append(vocab_size + num_class + max_ac_num + max_pair_num + i + 1)  # 63 == len(self.pair_idx_map[12])
# 		prefix.append(vocab_size + num_class + max_ac_num + max_pair_num * 2 + 3)
#
# 	prefix.append(sep_token_id)
#
# 	print(prefix)


# 6
# num_class = 7
# max_ac_num = 1
# max_pair_num = 1 #
# pair_num_map = {2: 1, 3: 3, 4: 6, 5: 10, 6: 15, 7: 21, 8: 28, 9: 36, 10: 45, 11: 54, 12:63}
# pair_idx_map = {
# 	2 : [0],
# 	3 : [0, 1, 9],
# 	4 : [0, 1, 2, 9, 10, 18],
# 	5 : [0, 1, 2, 3, 9, 10, 11, 18, 19, 27],
# 	6 : [0, 1, 2, 3, 4, 9, 10, 11, 12, 18, 19, 20, 27, 28, 35],
# 	7 : [0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 18, 19, 20, 21, 27, 28, 29, 35, 36, 42],
# 	8 : [0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 12, 13, 14, 18, 19, 20, 21, 22, 27, 28, 29, 30, 35, 36, 37, 42, 43, 48],
# 	9 : [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 35, 36,
# 	     37, 38, 42, 43, 44, 48, 49, 53],
# 	10 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30,
# 	      31, 32, 35, 36, 37, 38, 39, 42, 43, 44, 45, 48, 49, 50, 53, 54, 57],
# 	11 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28,
# 	      29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 48, 49, 50, 51, 53, 54, 55, 57, 58, 60],
# 	12 : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,
# 	      28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
# 	      54, 55, 56, 57, 58, 59, 60, 61, 62]
# }
#
# for span_num in list(range(2, 13)):
# 	prefix = [vocab_size + num_class] # virual doc token
# 	for i in range(1, span_num + 1):
# 		prefix.append(vocab_size + num_class + 1)  # num_class = 3 + 2 + 2 == 7
# 		prefix.append(vocab_size + num_class + max_ac_num + max_pair_num * 2 + 1)
#
# 	pair_index = pair_idx_map[span_num]
# 	for i in pair_index:
# 		prefix.append(vocab_size + num_class + max_ac_num + 1)
# 		prefix.append(vocab_size + num_class + max_ac_num + max_pair_num * 2 + 2)
#
# 	for i in pair_index:
# 		prefix.append(vocab_size + num_class + max_ac_num + max_pair_num + 1)  # 63 == len(self.pair_idx_map[12])
# 		prefix.append(vocab_size + num_class + max_ac_num + max_pair_num * 2 + 3)
#
# 	prefix.append(sep_token_id)
#
# 	print(prefix)


# 7
num_class = 9
max_ac_num = 28
max_pair_num = 258 #

pair_num_map = {1: 0, 2: 1, 3: 3, 4: 6, 5: 10, 6: 15, 7: 21, 8: 28, 9: 36, 10: 45, 11: 55, 12: 66, 13: 78, 14: 90,
                15: 102, 16: 114, 17: 126, 18: 138, 19: 150, 20: 162, 21: 174, 22: 186, 23: 198, 24: 210, 25: 222,
                26: 234, 27: 246, 28: 258}

pair_idx_map = {
			2 : tuple([0]),
			3 : tuple([0, 1, 12]),
			4 : tuple([0, 1, 2, 12, 13, 24]),
			5 : tuple([0, 1, 2, 3, 12, 13, 14, 24, 25, 36]),
			6 : tuple([0, 1, 2, 3, 4, 12, 13, 14, 15, 24, 25, 26, 36, 37, 48]),
			7 : tuple([0, 1, 2, 3, 4, 5, 12, 13, 14, 15, 16, 24, 25, 26, 27, 36, 37, 38, 48, 49, 60]),
			8 : tuple([0, 1, 2, 3, 4, 5, 6, 12, 13, 14, 15, 16, 17, 24, 25, 26, 27, 28, 36, 37, 38, 39, 48, 49, 50, 60,
			           61, 72]),
			9 : tuple([0, 1, 2, 3, 4, 5, 6, 7, 12, 13, 14, 15, 16, 17, 18, 24, 25, 26, 27, 28, 29, 36, 37, 38, 39, 40,
			           48, 49, 50, 51, 60, 61, 62, 72, 73, 84]),
			10 : tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 27, 28, 29, 30, 36, 37,
			            38, 39, 40, 41, 48, 49, 50, 51, 52, 60, 61, 62, 63, 72, 73, 74, 84, 85, 96]),
			11 : tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 30, 31,
			            36, 37, 38, 39, 40, 41, 42, 48, 49, 50, 51, 52, 53, 60, 61, 62, 63, 64, 72, 73, 74, 75, 84, 85,
			            86, 96, 97, 108]),
			12 : tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 24, 25, 26, 27, 28, 29,
			            30, 31, 32, 36, 37, 38, 39, 40, 41, 42, 43, 48, 49, 50, 51, 52, 53, 54, 60, 61, 62, 63, 64, 65,
			            72, 73, 74, 75, 76, 84, 85, 86, 87, 96, 97, 98, 108, 109, 120]),
			13: tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27,
			           28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 60,
			           61, 62, 63, 64, 65, 66, 72, 73, 74, 75, 76, 77, 84, 85, 86, 87, 88, 96, 97, 98, 99, 108, 109, 110,
			           120, 121, 132]),
			14: tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
			           27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53,
			           54, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 84, 85, 86, 87, 88, 89,
			           96, 97, 98, 99, 100, 108, 109, 110, 111, 120, 121, 122, 132, 133, 144]),
			15: tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
			           27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51,
			           52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 76, 77, 78, 79, 84,
			           85, 86, 87, 88, 89, 90, 96, 97, 98, 99, 100, 101, 108, 109, 110, 111, 112, 120, 121, 122, 123,
			           132, 133, 134, 144, 145, 156]),
			16: tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
			           27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
			           52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 76, 77, 78, 79,
			           80, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 98, 99, 100, 101, 102, 108, 109, 110, 111, 112, 113,
			           120, 121, 122, 123, 124, 132, 133, 134, 135, 144, 145, 146, 156, 157, 168]),
			17: tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
			           27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
			           52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77,
			           78, 79, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98, 99, 100, 101, 102, 103, 108, 109,
			           110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 132, 133, 134, 135, 136, 144, 145, 146, 147,
			           156, 157, 158, 168, 169, 180]),
			18: tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
			           27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
			           52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
			           77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103,
			           104, 108, 109, 110, 111, 112, 113, 114, 115, 120, 121, 122, 123, 124, 125, 126, 132, 133, 134, 135,
			           136, 137, 144, 145, 146, 147, 148, 156, 157, 158, 159, 168, 169, 170, 180, 181, 192]),
			19: tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
			           27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
			           52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
			           77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101,
			           102, 103, 104, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 120, 121, 122, 123, 124, 125, 126,
			           127, 132, 133, 134, 135, 136, 137, 138, 144, 145, 146, 147, 148, 149, 156, 157, 158, 159, 160, 168,
			           169, 170, 171, 180, 181, 182, 192, 193, 203]),
			20: tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
			           27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
			           52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
			           77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
			           101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123,
			           124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 138, 139, 144, 145, 146, 147, 148, 149, 150,
			           156, 157, 158, 159, 160, 161, 168, 169, 170, 171, 172, 180, 181, 182, 183, 192, 193, 194, 203, 204,
			           213]),
			21: tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
			           27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
			           51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
			           75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
			           99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
			           120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 144,
			           145, 146, 147, 148, 149, 150, 151, 156, 157, 158, 159, 160, 161, 162, 168, 169, 170, 171, 172, 173,
			           180, 181, 182, 183, 184, 192, 193, 194, 195, 203, 204, 205, 213, 214, 222]),
			22: tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
			           27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
			           52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
			           77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
			           101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
			           121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
			           144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 168, 169, 170,
			           171, 172, 173, 174, 180, 181, 182, 183, 184, 185, 192, 193, 194, 195, 196, 203, 204, 205, 206, 213,
			           214, 215, 222, 223, 230]),
			23: tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
			           27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
			           51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
			           75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
			           99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
			           119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
			           139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161,
			           162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 175, 180, 181, 182, 183, 184, 185, 186, 192, 193,
			           194, 195, 196, 197, 203, 204, 205, 206, 207, 213, 214, 215, 216, 222, 223, 224, 230, 231, 237]),
			24: tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
			           27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
			           51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
			           75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
			           99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
			           119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
			           139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159,
			           160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184,
			           185, 186, 187, 192, 193, 194, 195, 196, 197, 198, 203, 204, 205, 206, 207, 208, 213, 214, 215, 216,
			           217, 222, 223, 224, 225, 230, 231, 232, 237, 238, 243]),
			25: tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
			           27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
			           51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
			           75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
			           99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
			           119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
			           139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
			           159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 181,
			           182, 183, 184, 185, 186, 187, 188, 192, 193, 194, 195, 196, 197, 198, 199, 203, 204, 205, 206, 207,
			           208, 209, 213, 214, 215, 216, 217, 218, 222, 223, 224, 225, 226, 230, 231, 232, 233, 237, 238, 239,
			           243, 244, 248]),
			26: tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
			           27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
			           51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
			           75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
			           99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
			           119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
			           139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
			           159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
			           180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 203,
			           204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 222, 223, 224, 225, 226, 227,
			           230, 231, 232, 233, 234, 237, 238, 239, 240, 243, 244, 245, 248, 249, 252]),
			27: tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
			           27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
			           51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
			           75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
			           99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
			           119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
			           139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
			           159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
			           179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199,
			           200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 222,
			           223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 243, 244, 245,
			           246, 248, 249, 250, 252, 253, 255]),
			28: tuple([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
			           27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
			           51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
			           75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,
			           99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
			           119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
			           139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
			           159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
			           179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
			           199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
			           219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
			           239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257])
		}

for span_num in list(range(2, 29)):
    prefix = [vocab_size + num_class]  # virual doc token
    prefix.append(vocab_size + num_class + max_ac_num + max_pair_num*2 + 1)  # task 1

    for i in range(1, span_num + 1):
        prefix.append(vocab_size + num_class + i)  # num_class = 3 + 2 + 2 == 7

    prefix.append(vocab_size + num_class + max_ac_num + max_pair_num * 2 + 2)  # task 2
    pair_index = pair_idx_map[span_num]
    for i in pair_index:
        prefix.append(vocab_size + num_class + max_ac_num + i + 1)

    prefix.append(vocab_size + num_class + max_ac_num + max_pair_num * 2 + 3)  # task 3
    for i in pair_index:
        prefix.append(vocab_size + num_class + max_ac_num + max_pair_num + i + 1)  # 63 == len(self.pair_idx_map[12])

    prefix.append(sep_token_id)

    print(span_num, prefix)
